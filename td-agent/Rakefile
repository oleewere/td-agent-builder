#!/usr/bin/env rake
#
# td-agent-builder
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

require_relative '../lib/package-task'
require_relative '../lib/gems_parser'
require_relative 'config.rb'
require 'rake/testtask'
require 'rake/clean'
require 'erb'
require 'shellwords'
require 'pathname'
require 'open-uri'
require 'digest'
require 'etc'
require "yaml"

DOWNLOADS_DIR  = File.expand_path(ENV["TD_AGENT_DOWNLOADS_PATH"] || "downloads")
STAGING_DIR    = File.expand_path(ENV["TD_AGENT_STAGING_PATH"]   || "staging")

CLEAN.include(STAGING_DIR)
CLOBBER.include(DOWNLOADS_DIR)

# Debian
CLEAN.include("apt/tmp")
CLEAN.include("apt/build.sh")
CLEAN.include("apt/env.sh")
CLEAN.include("debian/tmp")
CLOBBER.include("apt/repositories")

# Red Hat
CLEAN.include("yum/tmp")
CLEAN.include("yum/build.sh")
CLEAN.include("yum/env.sh")
CLOBBER.include("yum/repositories")

# Windows
CLEAN.include("msi/env.bat")
CLEAN.include("msi/parameters.wxi")
CLEAN.include("msi/project-files.wxs")
CLEAN.include("msi/*.wixobj")
CLEAN.include("msi/*.wixpdb")
CLOBBER.include("msi/*.msi")

def windows?
  GemsParser.windows?
end

def ensure_directory(dirname)
  mkdir_p(dirname) unless File.exists?(dirname)
  if block_given?
    cd(dirname) do
      yield
    end
  end
end

def install_prefix
  "/opt/#{PACKAGE_NAME}"
end

def gem_dir_suffix
  "lib/ruby/gems/#{gem_dir_version}"
end

def gem_dir_version
  if windows?
    ruby_version = BUNDLED_RUBY_INSTALLER_X64_VERSION
  else
    ruby_version = BUNDLED_RUBY_VERSION
  end
  rb_major, rb_minor, rb_teeny = ruby_version.split("-", 2).first.split(".", 3)
  "#{rb_major}.#{rb_minor}.0" # gem path's teeny version is always 0
end

def template_params(params = nil)
  config = {
    project_name: PACKAGE_NAME,
    version: PACKAGE_VERSION,
    install_message: nil,
    pkg_type: nil,
  }

  unless windows?
    path_params = {
      install_path: install_prefix,
      gem_install_path: File.join(install_prefix, gem_dir_suffix),
    }
    config.merge!(path_params)
  end

  if params
    config.merge(params)
  else
    config
  end
end

def template_path(*path_parts)
  File.join('templates', *path_parts)
end

def render_template(dest, src, config, opts={})
  erb_binding = binding
  config.each do |key, value|
    erb_binding.local_variable_set(key, value)
  end

  destination = dest.gsub('td-agent', config[:project_name])
  directory = File.dirname(destination)
  mode = opts.fetch(:mode, 0644)

  puts "Generate #{destination}"
  ensure_directory(directory)
  File.open(destination, 'w', mode) do |f|
    template = ERB.new(File.read(src), nil, '<>')
    f.write(template.result(erb_binding))
  end
end

class DownloadTask
  include Rake::DSL

  attr_reader :file_jemalloc_source
  attr_reader :file_ruby_source, :file_ruby_installer_x64
  attr_reader :file_fluentd_archive
  attr_reader :files_ruby_gems

  def files
    [
      @file_jemalloc_source,
      @file_ruby_source,
      @file_ruby_installer_x64,
      @file_fluentd_archive,
      *@files_ruby_gems
    ]
  end

  def define
    define_jemalloc_file
    define_ruby_files
    define_fluentd_archive
    define_gem_files

    namespace :download do
      desc "Download jemalloc source"
      task :jemalloc => [@file_jemalloc_source]

      desc "Download Ruby source"
      task :ruby => [@file_ruby_source, @file_ruby_installer_x64]

      desc "Clone fluentd repository and create a tarball"
      task :fluentd => @file_fluentd_archive

      desc "Download ruby gems"
      task :ruby_gems => @files_ruby_gems

    end
  end

  private

  def download_file(url, filename, sha256sum = nil)
    tmp_filename = "#{filename}.part"

    ensure_directory(DOWNLOADS_DIR) do
      puts "Downloading #{filename}..."
      URI.open(url) do |in_file|
        File.open(tmp_filename, "wb") do |out_file|
          out_file.write(in_file.read)
        end
      end

      unless sha256sum.nil?
        digest = Digest::SHA256.file(tmp_filename)
        if digest != sha256sum
          fail "
          sha256sum of #{filename} did not matched!!!
            expected: #{sha256sum}
            actual:   #{digest}
          "
        end
      end

      mv(tmp_filename, filename)
    end
  end

  def define_jemalloc_file
    version = JEMALLOC_VERSION
    filename = "jemalloc-#{version}.tar.bz2"
    url_base = "https://github.com/jemalloc/jemalloc/releases/download/"
    @file_jemalloc_source = File.join(DOWNLOADS_DIR, filename)
    file @file_jemalloc_source do
      url = "#{url_base}/#{version}/#{filename}"
      download_file(url, filename)
    end
  end

  def define_ruby_files
    define_ruby_source_file
    define_ruby_installer_file
  end

  def define_ruby_source_file
    version = BUNDLED_RUBY_VERSION
    sha256sum = BUNDLED_RUBY_SOURCE_SHA256SUM
    filename = "ruby-#{version}.tar.gz"
    feature_version = version.match(/^(\d+\.\d+)/)[0]
    url_base = "https://cache.ruby-lang.org/pub/ruby/"
    url = "#{url_base}#{feature_version}/#{filename}"

    @file_ruby_source = File.join(DOWNLOADS_DIR, filename)

    file @file_ruby_source do
      download_file(url, filename, sha256sum)
    end
  end

  def define_ruby_installer_file
    version = BUNDLED_RUBY_INSTALLER_X64_VERSION
    sha256sum = BUNDLED_RUBY_INSTALLER_X64_SHA256SUM
    filename = "rubyinstaller-#{version}-x64.7z"
    url_base = "https://github.com/oneclick/rubyinstaller2/releases/download/"
    url = "#{url_base}RubyInstaller-#{version}/#{filename}"

    @file_ruby_installer_x64 = File.join(DOWNLOADS_DIR, filename)

    file @file_ruby_installer_x64 do
      download_file(url, filename, sha256sum)
    end
  end

  def define_fluentd_archive
    @file_fluentd_archive = File.join(DOWNLOADS_DIR, "fluentd-#{FLUENTD_REVISION}.tar.gz")
    file @file_fluentd_archive do
      ensure_directory(DOWNLOADS_DIR) do
        dirname = "fluentd-#{FLUENTD_REVISION}"
        rm_rf("fluentd") if File.exists?("fluentd")
        rm_rf(dirname) if File.exists?(dirname)
        sh("git", "clone", "https://github.com/fluent/fluentd.git")
        cd("fluentd") do
          sh("git", "checkout", FLUENTD_REVISION)
        end
        mv("fluentd", dirname)
        sh("tar", "cvfz", "#{dirname}.tar.gz", dirname)
      end
    end
  end

  def define_gem_files
    paths = []
    `bundle package --no-install --cache-path=#{DOWNLOADS_DIR}`
    rm_rf(".bundle") if File.exists?(".bundle/config")
    rm_rf("Gemfile.lock") if File.exists?("Gemfile.lock")
    paths = []
    Dir.glob("#{DOWNLOADS_DIR}/*.gem") do |path|
      paths << path
    end

    instance_variable_set("@files_ruby_gems", paths)
  end
end

class BuildTask
  include Rake::DSL

  def initialize(download_task)
    @download_task = download_task
  end

  def make_wix_version_number(version)
    return version unless version.include?("~")
    revision = ""
    case version
    when /~rc(\d+)/
      revision = $1.to_i * 10000 + Time.now.hour
    when /~beta(\d+)/
      revision = $1.to_i * 1000 + Time.now.hour
    when /~alpha(\d+)/
      revision = $1.to_i * 100 + Time.now.hour
    else
      fail "Failed to download #{gem}!" unless $?.success?
    end
    if revision > 65534
      fail "revision must be an integer, from 0 to 65534: <#{revision}>"
    end
    "%s.%s" % [
      version.split("~", 2)[0].delete(".").to_i.pred.to_s.chars.join("."),
      revision
    ]
  end

  def define
    namespace :build do
      desc "Install jemalloc"
      task :jemalloc => [:"download:jemalloc"] do
        build_jemalloc unless windows?
      end

      desc "Install Ruby"
      task :ruby => [:jemalloc, :"download:ruby"] do
        if windows?
          extract_ruby_installer
          setup_windows_build_env
          find_and_put_dynamiclibs
        else
          build_ruby_from_source
        end
      end

      desc "Install ruby gems"
      task :ruby_gems => [:"download:ruby_gems", :fluentd] do
        install_gems(@download_task.files_ruby_gems)
      end

      desc "Install fluentd"
      task :fluentd => [:"download:fluentd", :ruby] do
        cd(DOWNLOADS_DIR) do
          archive_path = @download_task.file_fluentd_archive
          fluentd_dir = archive_path.sub(/\.tar\.gz$/, '')
          sh("tar", "xvf", archive_path) unless File.exists?(fluentd_dir)
          cd("fluentd-#{FLUENTD_REVISION}") do
            sh("rake", "build")
            gem_install("pkg/fluentd-*.gem")
          end
        end
      end

      desc "Install all gems"
      task :gems => [:ruby_gems]

      desc "Collect licenses of bundled softwares"
      task :licenses => [:gems] do
        install_jemalloc_license
        install_ruby_license
        install_td_agent_license
        collect_gem_licenses
      end

      desc "Install all components"
      task :all => [:licenses] do
        remove_needless_files
      end

      debian_pkg_scripts = ["preinst", "postinst", "postrm"]
      debian_pkg_scripts.each do |script|
        CLEAN.include(File.join("..", "debian", script))
      end

      desc "Create debian package script files from template"
      task :deb_scripts do
        # Note: "debian" directory in this directory isn't used dilectly, it's
        # copied to the top directory of td-agent-builder in Docker container.
        # Since this task is executed in the container, package scripts should
        # be generated to the "debian" directory under the top directory
        # instead of this directory's one.
        debian_pkg_scripts.each do |script|
          src = template_path('package-scripts', 'td-agent', "deb", script)
          next unless File.exist?(src)
          dest = File.join("..", "debian", File.basename(script))
          render_template(dest, src, template_params, { mode: 0755 })
        end
      end

      desc "Create td-agent configuration files from template"
      task :td_agent_config do
        configs = [
          "etc/td-agent/td-agent.conf",
          "opt/td-agent/share/td-agent.conf.tmpl",
          "etc/logrotate.d/td-agent",
          "opt/td-agent/share/td-agent-ruby.conf"
        ]
        configs.each do |config|
          src = template_path(config)
          dest = File.join(STAGING_DIR, config)
          render_template(dest, src, template_params)
        end
      end

      desc "Create systemd-tmpfiles configuration files from template"
      task :systemd_tmpfiles_config do
        configs = [
          "usr/lib/tmpfiles.d/td-agent.conf",
        ]
        configs.each do |config|
          src = template_path(config)
          dest = File.join(STAGING_DIR, config)
          render_template(dest, src, template_params)
        end
      end

      desc "Create bin script files from template"
      task :bin_scripts do
        scripts = [
          "usr/bin/td",
          "usr/sbin/td-agent",
          "usr/sbin/td-agent-gem",
        ]
        scripts.each do |script|
          src = template_path("#{script}.erb")
          dest = File.join(STAGING_DIR, script)
          render_template(dest, src, template_params, { mode: 0755 })
        end
      end

      desc "Install additional .bat files for Windows"
      task :win_batch_files do
        ensure_directory(staging_bindir)
        cp("msi/assets/td-agent-prompt.bat", td_agent_staging_dir)
        cp("msi/assets/td-agent-post-install.bat", staging_bindir)
        cp("msi/assets/td-agent.bat", staging_bindir)
        cp("msi/assets/td-agent-gem.bat", staging_bindir)
      end

      desc "Create systemd unit file for Red Hat like systems"
      task :rpm_systemd do
        dest =  File.join(STAGING_DIR, 'usr', 'lib', 'systemd', 'system', PACKAGE_NAME + ".service")
        params = {pkg_type: "rpm"}
        render_systemd_unit_file(dest, template_params(params))
      end

      desc "Create sysv init file for Red Hat like systems"
      task :rpm_sysvinit do
        dest =  File.join(STAGING_DIR, 'etc', 'init.d', PACKAGE_NAME)
        params = {pkg_type: "rpm"}
        render_sysv_init_file(dest, template_params(params))
      end

      desc "Create systemd unit file for Debian like systems"
      task :deb_systemd do
        dest = File.join(STAGING_DIR, 'lib', 'systemd', 'system', PACKAGE_NAME + ".service")
        params = {pkg_type: "deb"}
        render_systemd_unit_file(dest, template_params(params))
      end

      desc "Create config files for WiX Toolset"
      task :wix_config do
        src  = File.join('msi', 'parameters.wxi.erb')
        dest = File.join('msi', 'parameters.wxi')
        params = {wix_package_version: make_wix_version_number(PACKAGE_VERSION)}
        render_template(dest, src, template_params(params))
      end

      desc "Create configuration files for Red Hat like systems with systemd"
      task :rpm_config => [:td_agent_config, :systemd_tmpfiles_config, :bin_scripts, :rpm_systemd]

      desc "Create configuration files for Red Hat like systems without systemd"
      task :rpm_old_config => [:td_agent_config, :bin_scripts, :rpm_sysvinit]

      desc "Create configuration files for Debian like systems"
      task :deb_config => [:td_agent_config, :systemd_tmpfiles_config, :bin_scripts, :deb_systemd, :deb_scripts]

      desc "Create configuration files for Windows"
      task :msi_config => [:td_agent_config, :wix_config, :win_batch_files]
    end
  end

  private

  def render_systemd_unit_file(dest_path, config)
    template_file_path = template_path('etc', 'systemd', 'td-agent.service.erb')
    render_template(dest_path, template_file_path, config)
  end

  def render_sysv_init_file(dest_path, config)
    template_file_path = template_path('etc', 'init.d', 'td-agent.erb')
    render_template(dest_path, template_file_path, config, {mode: 0755})
  end

  def apply_ruby_patches
    return if BUNDLED_RUBY_PATCHES.nil?
    BUNDLED_RUBY_PATCHES.each do |patch|
      patch_name, version_condition = patch
      dependency = Gem::Dependency.new('', version_condition)
      if dependency.match?('', BUNDLED_RUBY_VERSION)
        patch_path = File.join(__dir__, "patches", patch_name)
        sh("patch", "-p1", "--input=#{patch_path}")
      end
    end
  end

  def build_jemalloc
    tarball = @download_task.file_jemalloc_source
    source_dir = tarball.sub(/\.tar\.bz2$/, '')

    sh("tar", "xvf", tarball, "-C", DOWNLOADS_DIR)

    configure_opts = [
      "--prefix=#{install_prefix}",
    ]
    cd(source_dir) do
      sh("./configure", *configure_opts)
      sh("make", "install", "-j#{Etc.nprocessors}", "DESTDIR=#{STAGING_DIR}")
    end
  end

  def build_ruby_from_source
    tarball = @download_task.file_ruby_source
    ruby_source_dir = tarball.sub(/\.tar\.gz$/, '')

    sh("tar", "xvf", tarball, "-C", DOWNLOADS_DIR)

    configure_opts = [
      "--prefix=#{install_prefix}",
      "--enable-shared",
      "--disable-install-doc",
      "--with-compress-debug-sections=no", # https://bugs.ruby-lang.org/issues/12934
    ]
    cd(ruby_source_dir) do
      apply_ruby_patches
      sh("./configure", *configure_opts)
      sh("make", "install", "-j#{Etc.nprocessors}", "DESTDIR=#{STAGING_DIR}")

      # For building gems. The built ruby & gem command cannot use without install.
      sh("make", "install")
    end
  end

  def extract_ruby_installer
    ensure_directory(td_agent_staging_dir) do
      path = File.expand_path(@download_task.file_ruby_installer_x64)
      src_dir = File.basename(path).sub(/\.7z$/, '')
      sh("7z",
         "x",    # Extract files with full paths
         "-y",   # Assume yes on all queries
         path)
      cp_r(Dir.glob(File.join(src_dir, "*")), ".")
      rm_rf(src_dir)
    end
  end

  def find_and_put_dynamiclibs
    begin
      require 'ruby_installer/runtime'

      # These dlls are required to put in staging_bindir to run C++ based extension
      # included gem such as winevt_c. We didn't find how to link them statically yet.
      dlls = [
        "libstdc++-6",
      ]
      dlls.each do |dll|
        mingw_bin_path = RubyInstaller::Runtime.msys2_installation.mingw_bin_path
        windows_path = "#{mingw_bin_path}/#{dll}.dll"
        if File.exist?(windows_path)
          copy windows_path, staging_bindir
        else
          raise "Cannot find required DLL needed for dynamic linking: #{windows_path}"
        end
      end
    rescue LoadError
      raise "Cannot load RubyInstaller::Runtime class"
    end
  end

  def setup_windows_build_env
    sh("#{td_agent_staging_dir}/bin/ridk", "install", "3")
  end

  def install_prefix
    "/opt/#{PACKAGE_NAME}"
  end

  def td_agent_staging_dir
    # The staging directory on windows doesn't have install_prefix,
    # it's added by the installer.
    if windows?
      STAGING_DIR
    else
      File.join(STAGING_DIR, install_prefix)
    end
  end

  def staging_bindir
    File.join(td_agent_staging_dir, "bin")
  end

  def gem_command
    if windows?
      File.join(staging_bindir, "gem")
    else
      # On GNU/Linux we don't use gem command in staging path, use the one
      # installed in the proper path instead since Ruby doesn't support
      # running without install (although there are some solutions like rbenv).
      "#{install_prefix}/bin/gem"
    end
  end

  def gem_dir_version
    if windows?
      ruby_version = BUNDLED_RUBY_INSTALLER_X64_VERSION
    else
      ruby_version = BUNDLED_RUBY_VERSION
    end
    rb_major, rb_minor, rb_teeny = ruby_version.split("-", 2).first.split(".", 3)
    "#{rb_major}.#{rb_minor}.0" # gem path's teeny version is always 0
  end

  def licenses_staging_dir
    File.join(td_agent_staging_dir, "LICENSES")
  end

  def gem_staging_dir
    gemdir = `#{gem_command} env gemdir`.strip
    fail "Failed to get default installation directory for gems!" unless $?.success?

    if windows?
      expected    = File.join(td_agent_staging_dir, gem_dir_suffix)
      staging_dir = expected
    else
      expected    = File.join(install_prefix,       gem_dir_suffix)
      staging_dir = File.join(td_agent_staging_dir, gem_dir_suffix)
    end
    fail "Unsupposed gemdir: #{gemdir} (expected: #{expected})" unless gemdir == expected

    staging_dir
  end

  def gem_install(gem_path)
    ensure_directory(staging_bindir)
    ensure_directory(gem_staging_dir)

    gem_home = ENV["GEM_HOME"]
    ENV["GEM_HOME"] = gem_staging_dir

    sh(gem_command, "install",
       "--no-document",
       "--bindir", staging_bindir,
       gem_path)

    ENV["GEM_HOME"] = gem_home
  end

  def install_gems(files)
    files.each do |gem_path|
      gem_install(gem_path)
    end
  end

  def install_jemalloc_license
    return if windows?
    ensure_directory(licenses_staging_dir) do
      tarball = @download_task.file_jemalloc_source
      source_dir = File.basename(tarball.sub(/\.tar\.bz2$/, ''))
      license_file = File.join(source_dir, "COPYING")
      sh("tar", "xf", tarball, license_file)
      mv(license_file, "LICENSE-jemalloc.txt")
      rm_rf(source_dir)
    end
  end

  def install_ruby_license
    ensure_directory(licenses_staging_dir) do
      if windows?
        src  = File.join(td_agent_staging_dir, "LICENSE.txt")
        mv(src, "LICENSE-RubyInstaller.txt")
      end
      tarball = @download_task.file_ruby_source
      ruby_source_dir = File.basename(tarball.sub(/\.tar\.gz$/, ''))
      license_file = File.join(ruby_source_dir, "COPYING")
      sh("tar", "xf", tarball, license_file)
      mv(license_file, "LICENSE-Ruby.txt")
      rm_rf(ruby_source_dir)
    end
  end

  def install_td_agent_license
    ensure_directory(licenses_staging_dir)
    src = File.join(__dir__, "..", "LICENSE")
    dest = File.join(licenses_staging_dir, "LICENSE-td-agent.txt")
    cp(src, dest)
  end

  def collect_gem_licenses
    puts "Collecting licenses of gems..."

    env_restore = ENV["GEM_PATH"]
    ENV["GEM_PATH"] = gem_staging_dir
    gems_descriptions = `#{gem_command} list -d`
    gems_descriptions.gsub!(STAGING_DIR, "") unless windows?
    ENV["GEM_PATH"] = env_restore

    ensure_directory(licenses_staging_dir) do
      File.open("LICENSES-gems.txt", 'w', 0644) do |f|
        f.write(gems_descriptions)
      end
    end
  end

  def remove_files(pattern, recursive=false)
    files = Dir.glob(pattern)
    return if files.empty?
    if recursive
      rm_rf(files)
    else
      rm_f(files)
    end
  end

  def remove_needless_files
    remove_files("#{td_agent_staging_dir}/share/doc", true) # Contains only jemalloc.html
    cd("#{gem_staging_dir}/cache") do
      remove_files("*.gem")
    end
    Dir.glob("#{gem_staging_dir}/gems/*").each do |gem_dir|
      cd(gem_dir) do
        rm_rf(["test", "spec"])
        remove_files("**/gem.build_complete")
        remove_files("ext/**/a.out")
        remove_files("ext/**/*.{o,la,a}")
        remove_files("ext/**/.libs", true)
      end
    end
    Dir.glob("#{td_agent_staging_dir}/lib/lib*.a").each do |static_library|
      unless static_library.end_with?(".dll.a")
        rm_f(static_library)
      end
    end
  end
end

class LinuxPackageTask < PackageTask
  def initialize(download_task)
    @download_task = download_task
    super(PACKAGE_NAME, PACKAGE_VERSION, detect_release_time)
    @archive_tar_name = "#{@package}-#{@version}.tar"
    @archive_name = "#{@archive_tar_name}.gz"
    CLEAN.include(@archive_name)
  end

  private

  def define_archive_task
    repo_files = `git ls-files --full-name`.split("\n").collect do |path|
      File.join("..", path)
    end

    debian_copyright_file = File.join("td-agent", "debian", "copyright")
    file debian_copyright_file do
      build_copyright_file
    end

    file @archive_name => [*repo_files, *@download_task.files, debian_copyright_file]  do
      build_archive
    end
  end

  def build_copyright_file
    # Note: maintain debian/copyright manually is inappropriate way because
    # many gem is bundled with td-agent package.
    # We use gem specification GEMFILE to solve this issue.
    src = File.join("templates", "package-scripts", "td-agent", "deb", "copyright")
    dest = File.join("debian", "copyright")
    licenses = []
    @download_task.files_ruby_gems.each do |gem_file|
      spec = YAML.load(`gem specification #{gem_file}`)
      relative_path = gem_file.sub(/#{Dir.pwd}\//, "")
      unless spec.licenses.empty?
        spdx_compatible_license = spec.licenses.first.sub(/Apache 2\.0/, "Apache-2.0")
                                    .sub(/Apache License Version 2\.0/, "Apache-2.0")
        license = <<-EOS
Files: #{relative_path}
Copyright: #{spec.authors.join(",")}
License: #{spdx_compatible_license}
EOS
        licenses << license
      else
        # Note: remove this conditions when gem.licenses in gemspec was fixed in upstream
        case spec.name
        when "cool.io", "async-pool"
          license = "MIT"

        when "td", "webhdfs"
          license = "Apache-2.0"
        end
        licenses <<= <<-EOS
Files: #{relative_path}
Copyright: #{spec.authors.join(",")}
License: #{license}
EOS
      end
    end
    params = {
      bundled_gem_licenses: licenses.join("\n"),
      bundled_ruby_version: BUNDLED_RUBY_VERSION
    }
    render_template(dest, src, template_params(params))
  end

  def build_archive
    cd("..") do
      sh("git", "archive", "HEAD",
         "--prefix", "#{@archive_base_name}/",
         "--output", @full_archive_name)
      sh("tar", "xvf", @full_archive_name)
      @download_task.files.each do |path|
        src_path = Pathname(path)
        dest_path = Pathname(DOWNLOADS_DIR)
        relative_path = src_path.relative_path_from(dest_path)
        dest_downloads_dir = "#{@archive_base_name}/td-agent/downloads"
        dest_dir = "#{dest_downloads_dir}/#{File.dirname(relative_path)}"
        ensure_directory(dest_dir)
        cp_r(path, dest_dir)
      end
      cp_r("td-agent/debian/copyright", "#{@archive_base_name}/td-agent/debian/copyright")
      sh("tar", "cvfz", @full_archive_name, @archive_base_name)
      rm_rf(@archive_base_name)
    end
  end

  def apt_targets_default
    [
      "debian-buster",
      "ubuntu-xenial",
      "ubuntu-bionic",
      "ubuntu-focal",
    ]
  end

  def yum_targets_default
    [
      "centos-6",
      "centos-7",
      "centos-8",
    ]
  end

  private
  def detect_release_time
    release_time_env = ENV["TD_AGENT_RELEASE_TIME"]
    if release_time_env
      Time.parse(release_time_env).utc
    else
      Time.now.utc
    end
  end
end

class WindowsPackageTask
  include Rake::DSL

  MSI_OUTPUT_DIR = ENV["TD_AGENT_MSI_OUTPUT_PATH"] || "."

  def initialize
    @package = PACKAGE_NAME
    @version = PACKAGE_VERSION
    @staging_dir = STAGING_DIR
  end

  def define
    namespace :msi do
      desc "Build MSI package (alias for msi:dockerbuild)"
      task :build do
        Rake::Task["msi:dockerbuild"].invoke
      end

      desc "Build MSI package without using Docker"
      task :selfbuild => [:"build:msi_config", :"build:all"] do
        run_build
      end

      desc "Build MSI package by Docker"
      task :dockerbuild => ["#{PACKAGE_NAME}-#{PACKAGE_VERSION}.tar.gz"] do
        run_docker("windows", arch)
      end
    end
  end

  private

  def run_build
    output_dir = MSI_OUTPUT_DIR.gsub(File::ALT_SEPARATOR, File::SEPARATOR)
    ensure_directory(output_dir)

    cd("msi") do
      # Pick up package contents
      sh(heat_path,
         "dir", @staging_dir,
         "-nologo", # Skip heat logo
         "-srd",    # Suppress harvesting the root directory as an element
         "-sreg",   # Suppress registry harvesting
         "-gg",                          # Generate guides
         "-cg", "ProjectDir",            # Component Group Name
         "-dr", "PROJECTLOCATION",       # Root directory reference
         "-var", "var.ProjectSourceDir", # Substitue File/@Source="SourceDir"
         "-t",   "exclude-files.xslt",   # XSLT for exclude files
         "-out", 'project-files.wxs')

      # Build
      sh(candle_path,
         "-nologo",                            # Skip candle logo
         "-dProjectSourceDir=#{@staging_dir}", # Define a parameter
         "-arch", "#{arch}",
         "project-files.wxs",
         "source.wxs")

      # Link
      sh(light_path,
         "-nologo",                        # Skip light logo
         "-ext", "WixUIExtension",         # Extension assembly
         "-cultures:en-us",                # Localization
         "-loc", "localization-en-us.wxl", # Localization file
         "project-files.wixobj",
         "source.wixobj",
         "-out", File.join(output_dir, "#{@package}-#{@version}-#{arch}.msi"))
    end
  end

  def write_env
    env_bat = "msi/env.bat"
    File.open(env_bat, "w") do |file|
      file.puts(<<-ENV)
SET PACKAGE=#{@package}
SET VERSION=#{@version}
SET ARCH=#{arch}
      ENV
    end
  end

  # TODO: Unify with PackageTask
  def run_docker(os, architecture=nil)
    top_dir = File.expand_path('../.')
    id = os
    id = "#{id}-#{architecture}" if architecture
    docker_tag = "#{@package}-#{id}"
    build_command_line = [
      "docker",
      "build",
      "--tag", docker_tag,
    ]
    run_command_line = [
      "docker",
      "run",
      "--rm",
      "--tty",
      "--volume", "#{top_dir}:c:/td-agent-builder:rw",
    ]
    docker_context = "msi"
    build_command_line << docker_context
    run_command_line.concat([docker_tag, 'c:\td-agent-builder\td-agent\msi\build.bat'])

    write_env

    sh(*build_command_line)
    sh(*run_command_line)
  end

  def windows_path(*pieces)
    path = File.join(*pieces)
    if File::ALT_SEPARATOR
      path.gsub(File::SEPARATOR, File::ALT_SEPARATOR)
    else
      path
    end
  end

  def wix_dir
    dir = ENV["WIX"]
    fail "Can't find WiX commands path" if dir.nil? || dir.empty?
    dir
  end

  def wix_bin_dir
    windows_path(wix_dir, "bin")
  end

  def heat_path
    windows_path(wix_bin_dir, "heat")
  end

  def candle_path
    windows_path(wix_bin_dir, "candle")
  end

  def light_path
    windows_path(wix_bin_dir, "light")
  end

  def arch
    if RUBY_PLATFORM =~ /x64/
      "x64"
    elsif RUBY_PLATFORM =~ /i386/
      "x86"
    else
      fail "Unknown platform: #{RUBY_PLATFORM}"
    end
  end
end

download_task = DownloadTask.new
download_task.define

build_task = BuildTask.new(download_task)
build_task.define

linux_package_task = LinuxPackageTask.new(download_task)
linux_package_task.define

windows_package_task = WindowsPackageTask.new
windows_package_task.define
